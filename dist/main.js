/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Chessboard = __webpack_require__(/*! ./js/chessboard */ \"./js/chessboard.js\");\nconst Chess = __webpack_require__(/*! chess.js */ \"./node_modules/chess.js/chess.js\");\n\nvar board,\n  game = new Chess(),\n  statusEl = $('#status'),\n  fenEl = $('#fen'),\n  pgnEl = $('#pgn');\n\n// do not pick up pieces if the game is over\n// only pick up pieces for the side to move\nvar onDragStart = function(source, piece, position, orientation) {\n  if (game.game_over() === true ||\n      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||\n      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {\n    return false;\n  }\n};\n\nvar onDrop = function(source, target) {\n  // see if the move is legal\n  var move = game.move({\n    from: source,\n    to: target,\n    promotion: 'q' // NOTE: always promote to a queen for example simplicity\n  });\n\n  // illegal move\n  if (move === null) return 'snapback';\n\n  storeMoveOnPod(game.get(target), target);\n  updateStatus();\n};\n\n// update the board position after the piece snap\n// for castling, en passant, pawn promotion\nvar onSnapEnd = function() {\n  board.position(game.fen());\n};\n\nvar updateStatus = function() {\n  var status = '';\n\n  var moveColor = 'White';\n  if (game.turn() === 'b') {\n    moveColor = 'Black';\n  }\n\n  // checkmate?\n  if (game.in_checkmate() === true) {\n    status = 'Game over, ' + moveColor + ' is in checkmate.';\n  }\n\n  // draw?\n  else if (game.in_draw() === true) {\n    status = 'Game over, drawn position';\n  }\n\n  // game still on\n  else {\n    status = moveColor + ' to move';\n\n    // check?\n    if (game.in_check() === true) {\n      status += ', ' + moveColor + ' is in check';\n    }\n  }\n\n  statusEl.html(status);\n  fenEl.html(game.fen());\n  pgnEl.html(game.pgn());\n};\n\nfunction storeMoveOnPod(piece, target) {\n  console.log(piece);\n  console.log(`at ${target}`);\n}\n\nvar cfg = {\n  draggable: true,\n  position: 'start',\n  onDragStart: onDragStart,\n  onDrop: onDrop,\n  onSnapEnd: onSnapEnd\n};\nboard = ChessBoard('board', cfg);\n\nupdateStatus();\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./js/chessboard.js":
/*!**************************!*\
  !*** ./js/chessboard.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// chessboard.js v@VERSION\n// https://github.com/oakmac/chessboardjs/\n//\n// Copyright (c) 2017, Chris Oakman\n// Released under the MIT license\n// https://github.com/oakmac/chessboardjs/blob/master/LICENSE.md\n\n// start anonymous scope\n;(function () {\n  'use strict'\n\n  var $ = window['jQuery']\n\n  // ---------------------------------------------------------------------------\n  // Constants\n  // ---------------------------------------------------------------------------\n\n  var COLUMNS = 'abcdefgh'.split('')\n  var DEFAULT_DRAG_THROTTLE_RATE = 20\n  var ELLIPSIS = 'â€¦'\n  var MINIMUM_JQUERY_VERSION = '1.8.3'\n  var RUN_ASSERTS = true\n  var START_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'\n  var START_POSITION = fenToObj(START_FEN)\n\n  // default animation speeds\n  var DEFAULT_APPEAR_SPEED = 200\n  var DEFAULT_MOVE_SPEED = 200\n  var DEFAULT_SNAPBACK_SPEED = 60\n  var DEFAULT_SNAP_SPEED = 30\n  var DEFAULT_TRASH_SPEED = 100\n\n  // use unique class names to prevent clashing with anything else on the page\n  // and simplify selectors\n  // NOTE: these should never change\n  var CSS = {}\n  CSS['alpha'] = 'alpha-d2270'\n  CSS['black'] = 'black-3c85d'\n  CSS['board'] = 'board-b72b1'\n  CSS['chessboard'] = 'chessboard-63f37'\n  CSS['clearfix'] = 'clearfix-7da63'\n  CSS['highlight1'] = 'highlight1-32417'\n  CSS['highlight2'] = 'highlight2-9c5d2'\n  CSS['notation'] = 'notation-322f9'\n  CSS['numeric'] = 'numeric-fc462'\n  CSS['piece'] = 'piece-417db'\n  CSS['row'] = 'row-5277c'\n  CSS['sparePieces'] = 'spare-pieces-7492f'\n  CSS['sparePiecesBottom'] = 'spare-pieces-bottom-ae20f'\n  CSS['sparePiecesTop'] = 'spare-pieces-top-4028b'\n  CSS['square'] = 'square-55d63'\n  CSS['white'] = 'white-1e1d7'\n\n  // ---------------------------------------------------------------------------\n  // Misc Util Functions\n  // ---------------------------------------------------------------------------\n\n  function throttle (f, interval, scope) {\n    var timeout = 0\n    var shouldFire = false\n    var args = []\n\n    var handleTimeout = function () {\n      timeout = 0\n      if (shouldFire) {\n        shouldFire = false\n        fire()\n      }\n    }\n\n    var fire = function () {\n      timeout = window.setTimeout(handleTimeout, interval)\n      f.apply(scope, args)\n    }\n\n    return function (_args) {\n      args = arguments\n      if (!timeout) {\n        fire()\n      } else {\n        shouldFire = true\n      }\n    }\n  }\n\n  // function debounce (f, interval, scope) {\n  //   var timeout = 0\n  //   return function (_args) {\n  //     window.clearTimeout(timeout)\n  //     var args = arguments\n  //     timeout = window.setTimeout(function () {\n  //       f.apply(scope, args)\n  //     }, interval)\n  //   }\n  // }\n\n  function uuid () {\n    return 'xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx'.replace(/x/g, function (c) {\n      var r = (Math.random() * 16) | 0\n      return r.toString(16)\n    })\n  }\n\n  function deepCopy (thing) {\n    return JSON.parse(JSON.stringify(thing))\n  }\n\n  function parseSemVer (version) {\n    var tmp = version.split('.')\n    return {\n      major: parseInt(tmp[0], 10),\n      minor: parseInt(tmp[1], 10),\n      patch: parseInt(tmp[2], 10)\n    }\n  }\n\n  // returns true if version is >= minimum\n  function validSemanticVersion (version, minimum) {\n    version = parseSemVer(version)\n    minimum = parseSemVer(minimum)\n\n    var versionNum = (version.major * 100000 * 100000) +\n                     (version.minor * 100000) +\n                     version.patch\n    var minimumNum = (minimum.major * 100000 * 100000) +\n                     (minimum.minor * 100000) +\n                     minimum.patch\n\n    return versionNum >= minimumNum\n  }\n\n  function interpolateTemplate (str, obj) {\n    for (var key in obj) {\n      if (!obj.hasOwnProperty(key)) continue\n      var keyTemplateStr = '{' + key + '}'\n      var value = obj[key]\n      while (str.indexOf(keyTemplateStr) !== -1) {\n        str = str.replace(keyTemplateStr, value)\n      }\n    }\n    return str\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(interpolateTemplate('abc', {a: 'x'}) === 'abc')\n    console.assert(interpolateTemplate('{a}bc', {}) === '{a}bc')\n    console.assert(interpolateTemplate('{a}bc', {p: 'q'}) === '{a}bc')\n    console.assert(interpolateTemplate('{a}bc', {a: 'x'}) === 'xbc')\n    console.assert(interpolateTemplate('{a}bc{a}bc', {a: 'x'}) === 'xbcxbc')\n    console.assert(interpolateTemplate('{a}{a}{b}', {a: 'x', b: 'y'}) === 'xxy')\n  }\n\n  // ---------------------------------------------------------------------------\n  // Predicates\n  // ---------------------------------------------------------------------------\n\n  function isString (s) {\n    return typeof s === 'string'\n  }\n\n  function isFunction (f) {\n    return typeof f === 'function'\n  }\n\n  function isInteger (n) {\n    return typeof n === 'number' &&\n           isFinite(n) &&\n           Math.floor(n) === n\n  }\n\n  function validAnimationSpeed (speed) {\n    if (speed === 'fast' || speed === 'slow') return true\n    if (!isInteger(speed)) return false\n    return speed >= 0\n  }\n\n  function validThrottleRate (rate) {\n    return isInteger(rate) &&\n           rate >= 1\n  }\n\n  function validMove (move) {\n    // move should be a string\n    if (!isString(move)) return false\n\n    // move should be in the form of \"e2-e4\", \"f6-d5\"\n    var squares = move.split('-')\n    if (squares.length !== 2) return false\n\n    return validSquare(squares[0]) && validSquare(squares[1])\n  }\n\n  function validSquare (square) {\n    return isString(square) && square.search(/^[a-h][1-8]$/) !== -1\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validSquare('a1'))\n    console.assert(validSquare('e2'))\n    console.assert(!validSquare('D2'))\n    console.assert(!validSquare('g9'))\n    console.assert(!validSquare('a'))\n    console.assert(!validSquare(true))\n    console.assert(!validSquare(null))\n    console.assert(!validSquare({}))\n  }\n\n  function validPieceCode (code) {\n    return isString(code) && code.search(/^[bw][KQRNBP]$/) !== -1\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validPieceCode('bP'))\n    console.assert(validPieceCode('bK'))\n    console.assert(validPieceCode('wK'))\n    console.assert(validPieceCode('wR'))\n    console.assert(!validPieceCode('WR'))\n    console.assert(!validPieceCode('Wr'))\n    console.assert(!validPieceCode('a'))\n    console.assert(!validPieceCode(true))\n    console.assert(!validPieceCode(null))\n    console.assert(!validPieceCode({}))\n  }\n\n  function validFen (fen) {\n    if (!isString(fen)) return false\n\n    // cut off any move, castling, etc info from the end\n    // we're only interested in position information\n    fen = fen.replace(/ .+$/, '')\n\n    // expand the empty square numbers to just 1s\n    fen = expandFenEmptySquares(fen)\n\n    // FEN should be 8 sections separated by slashes\n    var chunks = fen.split('/')\n    if (chunks.length !== 8) return false\n\n    // check each section\n    for (var i = 0; i < 8; i++) {\n      if (chunks[i].length !== 8 ||\n          chunks[i].search(/[^kqrnbpKQRNBP1]/) !== -1) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validFen(START_FEN))\n    console.assert(validFen('8/8/8/8/8/8/8/8'))\n    console.assert(validFen('r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R'))\n    console.assert(validFen('3r3r/1p4pp/2nb1k2/pP3p2/8/PB2PN2/p4PPP/R4RK1 b - - 0 1'))\n    console.assert(!validFen('3r3z/1p4pp/2nb1k2/pP3p2/8/PB2PN2/p4PPP/R4RK1 b - - 0 1'))\n    console.assert(!validFen('anbqkbnr/8/8/8/8/8/PPPPPPPP/8'))\n    console.assert(!validFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/'))\n    console.assert(!validFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBN'))\n    console.assert(!validFen('888888/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'))\n    console.assert(!validFen('888888/pppppppp/74/8/8/8/PPPPPPPP/RNBQKBNR'))\n    console.assert(!validFen({}))\n  }\n\n  function validPositionObject (pos) {\n    if (!$.isPlainObject(pos)) return false\n\n    for (var i in pos) {\n      if (!pos.hasOwnProperty(i)) continue\n\n      if (!validSquare(i) || !validPieceCode(pos[i])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validPositionObject(START_POSITION))\n    console.assert(validPositionObject({}))\n    console.assert(validPositionObject({e2: 'wP'}))\n    console.assert(validPositionObject({e2: 'wP', d2: 'wP'}))\n    console.assert(!validPositionObject({e2: 'BP'}))\n    console.assert(!validPositionObject({y2: 'wP'}))\n    console.assert(!validPositionObject(null))\n    console.assert(!validPositionObject('start'))\n    console.assert(!validPositionObject(START_FEN))\n  }\n\n  function isTouchDevice () {\n    return 'ontouchstart' in document.documentElement\n  }\n\n  function validJQueryVersion () {\n    return typeof window.$ &&\n           $.fn &&\n           $.fn.jquery &&\n           validSemanticVersion($.fn.jquery, MINIMUM_JQUERY_VERSION)\n  }\n\n  // ---------------------------------------------------------------------------\n  // Chess Util Functions\n  // ---------------------------------------------------------------------------\n\n  // convert FEN piece code to bP, wK, etc\n  function fenToPieceCode (piece) {\n    // black piece\n    if (piece.toLowerCase() === piece) {\n      return 'b' + piece.toUpperCase()\n    }\n\n    // white piece\n    return 'w' + piece.toUpperCase()\n  }\n\n  // convert bP, wK, etc code to FEN structure\n  function pieceCodeToFen (piece) {\n    var pieceCodeLetters = piece.split('')\n\n    // white piece\n    if (pieceCodeLetters[0] === 'w') {\n      return pieceCodeLetters[1].toUpperCase()\n    }\n\n    // black piece\n    return pieceCodeLetters[1].toLowerCase()\n  }\n\n  // convert FEN string to position object\n  // returns false if the FEN string is invalid\n  function fenToObj (fen) {\n    if (!validFen(fen)) return false\n\n    // cut off any move, castling, etc info from the end\n    // we're only interested in position information\n    fen = fen.replace(/ .+$/, '')\n\n    var rows = fen.split('/')\n    var position = {}\n\n    var currentRow = 8\n    for (var i = 0; i < 8; i++) {\n      var row = rows[i].split('')\n      var colIdx = 0\n\n      // loop through each character in the FEN section\n      for (var j = 0; j < row.length; j++) {\n        // number / empty squares\n        if (row[j].search(/[1-8]/) !== -1) {\n          var numEmptySquares = parseInt(row[j], 10)\n          colIdx = colIdx + numEmptySquares\n        } else {\n          // piece\n          var square = COLUMNS[colIdx] + currentRow\n          position[square] = fenToPieceCode(row[j])\n          colIdx = colIdx + 1\n        }\n      }\n\n      currentRow = currentRow - 1\n    }\n\n    return position\n  }\n\n  // position object to FEN string\n  // returns false if the obj is not a valid position object\n  function objToFen (obj) {\n    if (!validPositionObject(obj)) return false\n\n    var fen = ''\n\n    var currentRow = 8\n    for (var i = 0; i < 8; i++) {\n      for (var j = 0; j < 8; j++) {\n        var square = COLUMNS[j] + currentRow\n\n        // piece exists\n        if (obj.hasOwnProperty(square)) {\n          fen = fen + pieceCodeToFen(obj[square])\n        } else {\n          // empty space\n          fen = fen + '1'\n        }\n      }\n\n      if (i !== 7) {\n        fen = fen + '/'\n      }\n\n      currentRow = currentRow - 1\n    }\n\n    // squeeze the empty numbers together\n    fen = squeezeFenEmptySquares(fen)\n\n    return fen\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(objToFen(START_POSITION) === START_FEN)\n    console.assert(objToFen({}) === '8/8/8/8/8/8/8/8')\n    console.assert(objToFen({a2: 'wP', 'b2': 'bP'}) === '8/8/8/8/8/8/Pp6/8')\n  }\n\n  function squeezeFenEmptySquares (fen) {\n    return fen.replace(/11111111/g, '8')\n              .replace(/1111111/g, '7')\n              .replace(/111111/g, '6')\n              .replace(/11111/g, '5')\n              .replace(/1111/g, '4')\n              .replace(/111/g, '3')\n              .replace(/11/g, '2')\n  }\n\n  function expandFenEmptySquares (fen) {\n    return fen.replace(/8/g, '11111111')\n              .replace(/7/g, '1111111')\n              .replace(/6/g, '111111')\n              .replace(/5/g, '11111')\n              .replace(/4/g, '1111')\n              .replace(/3/g, '111')\n              .replace(/2/g, '11')\n  }\n\n  // returns the distance between two squares\n  function squareDistance (squareA, squareB) {\n    var squareAArray = squareA.split('')\n    var squareAx = COLUMNS.indexOf(squareAArray[0]) + 1\n    var squareAy = parseInt(squareAArray[1], 10)\n\n    var squareBArray = squareB.split('')\n    var squareBx = COLUMNS.indexOf(squareBArray[0]) + 1\n    var squareBy = parseInt(squareBArray[1], 10)\n\n    var xDelta = Math.abs(squareAx - squareBx)\n    var yDelta = Math.abs(squareAy - squareBy)\n\n    if (xDelta >= yDelta) return xDelta\n    return yDelta\n  }\n\n  // returns the square of the closest instance of piece\n  // returns false if no instance of piece is found in position\n  function findClosestPiece (position, piece, square) {\n    // create array of closest squares from square\n    var closestSquares = createRadius(square)\n\n    // search through the position in order of distance for the piece\n    for (var i = 0; i < closestSquares.length; i++) {\n      var s = closestSquares[i]\n\n      if (position.hasOwnProperty(s) && position[s] === piece) {\n        return s\n      }\n    }\n\n    return false\n  }\n\n  // returns an array of closest squares from square\n  function createRadius (square) {\n    var squares = []\n\n    // calculate distance of all squares\n    for (var i = 0; i < 8; i++) {\n      for (var j = 0; j < 8; j++) {\n        var s = COLUMNS[i] + (j + 1)\n\n        // skip the square we're starting from\n        if (square === s) continue\n\n        squares.push({\n          square: s,\n          distance: squareDistance(square, s)\n        })\n      }\n    }\n\n    // sort by distance\n    squares.sort(function (a, b) {\n      return a.distance - b.distance\n    })\n\n    // just return the square code\n    var surroundingSquares = []\n    for (i = 0; i < squares.length; i++) {\n      surroundingSquares.push(squares[i].square)\n    }\n\n    return surroundingSquares\n  }\n\n  // given a position and a set of moves, return a new position\n  // with the moves executed\n  function calculatePositionFromMoves (position, moves) {\n    var newPosition = deepCopy(position)\n\n    for (var i in moves) {\n      if (!moves.hasOwnProperty(i)) continue\n\n      // skip the move if the position doesn't have a piece on the source square\n      if (!newPosition.hasOwnProperty(i)) continue\n\n      var piece = newPosition[i]\n      delete newPosition[i]\n      newPosition[moves[i]] = piece\n    }\n\n    return newPosition\n  }\n\n  // TODO: add some asserts here for calculatePositionFromMoves\n\n  // ---------------------------------------------------------------------------\n  // HTML\n  // ---------------------------------------------------------------------------\n\n  function buildContainerHTML (hasSparePieces) {\n    var html = '<div class=\"{chessboard}\">'\n\n    if (hasSparePieces) {\n      html += '<div class=\"{sparePieces} {sparePiecesTop}\"></div>'\n    }\n\n    html += '<div class=\"{board}\"></div>'\n\n    if (hasSparePieces) {\n      html += '<div class=\"{sparePieces} {sparePiecesBottom}\"></div>'\n    }\n\n    html += '</div>'\n\n    return interpolateTemplate(html, CSS)\n  }\n\n  // ---------------------------------------------------------------------------\n  // Config\n  // ---------------------------------------------------------------------------\n\n  function expandConfigArgumentShorthand (config) {\n    if (config === 'start') {\n      config = {position: deepCopy(START_POSITION)}\n    } else if (validFen(config)) {\n      config = {position: fenToObj(config)}\n    } else if (validPositionObject(config)) {\n      config = {position: deepCopy(config)}\n    }\n\n    // config must be an object\n    if (!$.isPlainObject(config)) config = {}\n\n    return config\n  }\n\n  // validate config / set default options\n  function expandConfig (config) {\n    // default for orientation is white\n    if (config.orientation !== 'black') config.orientation = 'white'\n\n    // default for showNotation is true\n    if (config.showNotation !== false) config.showNotation = true\n\n    // default for draggable is false\n    if (config.draggable !== true) config.draggable = false\n\n    // default for dropOffBoard is 'snapback'\n    if (config.dropOffBoard !== 'trash') config.dropOffBoard = 'snapback'\n\n    // default for sparePieces is false\n    if (config.sparePieces !== true) config.sparePieces = false\n\n    // draggable must be true if sparePieces is enabled\n    if (config.sparePieces) config.draggable = true\n\n    // default piece theme is wikipedia\n    if (!config.hasOwnProperty('pieceTheme') ||\n        (!isString(config.pieceTheme) && !isFunction(config.pieceTheme))) {\n      config.pieceTheme = 'img/chesspieces/wikipedia/{piece}.png'\n    }\n\n    // animation speeds\n    if (!validAnimationSpeed(config.appearSpeed)) config.appearSpeed = DEFAULT_APPEAR_SPEED\n    if (!validAnimationSpeed(config.moveSpeed)) config.moveSpeed = DEFAULT_MOVE_SPEED\n    if (!validAnimationSpeed(config.snapbackSpeed)) config.snapbackSpeed = DEFAULT_SNAPBACK_SPEED\n    if (!validAnimationSpeed(config.snapSpeed)) config.snapSpeed = DEFAULT_SNAP_SPEED\n    if (!validAnimationSpeed(config.trashSpeed)) config.trashSpeed = DEFAULT_TRASH_SPEED\n\n    // throttle rate\n    if (!validThrottleRate(config.dragThrottleRate)) config.dragThrottleRate = DEFAULT_DRAG_THROTTLE_RATE\n\n    return config\n  }\n\n  // ---------------------------------------------------------------------------\n  // Dependencies\n  // ---------------------------------------------------------------------------\n\n  // check for a compatible version of jQuery\n  function checkJQuery () {\n    if (!validJQueryVersion()) {\n      var errorMsg = 'Chessboard Error 1005: Unable to find a valid version of jQuery. ' +\n        'Please include jQuery ' + MINIMUM_JQUERY_VERSION + ' or higher on the page' +\n        '\\n\\n' +\n        'Exiting' + ELLIPSIS\n      window.alert(errorMsg)\n      return false\n    }\n\n    return true\n  }\n\n  // return either boolean false or the $container element\n  function checkContainerArg (containerElOrString) {\n    if (containerElOrString === '') {\n      var errorMsg1 = 'Chessboard Error 1001: ' +\n        'The first argument to Chessboard() cannot be an empty string.' +\n        '\\n\\n' +\n        'Exiting' + ELLIPSIS\n      window.alert(errorMsg1)\n      return false\n    }\n\n    // convert containerEl to query selector if it is a string\n    if (isString(containerElOrString) &&\n        containerElOrString.charAt(0) !== '#') {\n      containerElOrString = '#' + containerElOrString\n    }\n\n    // containerEl must be something that becomes a jQuery collection of size 1\n    var $container = $(containerElOrString)\n    if ($container.length !== 1) {\n      var errorMsg2 = 'Chessboard Error 1003: ' +\n        'The first argument to Chessboard() must be the ID of a DOM node, ' +\n        'an ID query selector, or a single DOM node.' +\n        '\\n\\n' +\n        'Exiting' + ELLIPSIS\n      window.alert(errorMsg2)\n      return false\n    }\n\n    return $container\n  }\n\n  // ---------------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------------\n\n  function constructor (containerElOrString, config) {\n    // first things first: check basic dependencies\n    if (!checkJQuery()) return null\n    var $container = checkContainerArg(containerElOrString)\n    if (!$container) return null\n\n    // ensure the config object is what we expect\n    config = expandConfigArgumentShorthand(config)\n    config = expandConfig(config)\n\n    // DOM elements\n    var $board = null\n    var $draggedPiece = null\n    var $sparePiecesTop = null\n    var $sparePiecesBottom = null\n\n    // constructor return object\n    var widget = {}\n\n    // -------------------------------------------------------------------------\n    // Stateful\n    // -------------------------------------------------------------------------\n\n    var boardBorderSize = 2\n    var currentOrientation = 'white'\n    var currentPosition = {}\n    var draggedPiece = null\n    var draggedPieceLocation = null\n    var draggedPieceSource = null\n    var isDragging = false\n    var sparePiecesElsIds = {}\n    var squareElsIds = {}\n    var squareElsOffsets = {}\n    var squareSize = 16\n\n    // -------------------------------------------------------------------------\n    // Validation / Errors\n    // -------------------------------------------------------------------------\n\n    function error (code, msg, obj) {\n        // do nothing if showErrors is not set\n      if (\n          config.hasOwnProperty('showErrors') !== true ||\n          config.showErrors === false\n        ) {\n        return\n      }\n\n      var errorText = 'Chessboard Error ' + code + ': ' + msg\n\n        // print to console\n      if (\n          config.showErrors === 'console' &&\n          typeof console === 'object' &&\n          typeof console.log === 'function'\n        ) {\n        console.log(errorText)\n        if (arguments.length >= 2) {\n          console.log(obj)\n        }\n        return\n      }\n\n        // alert errors\n      if (config.showErrors === 'alert') {\n        if (obj) {\n          errorText += '\\n\\n' + JSON.stringify(obj)\n        }\n        window.alert(errorText)\n        return\n      }\n\n      // custom function\n      if (isFunction(config.showErrors)) {\n        config.showErrors(code, msg, obj)\n      }\n    }\n\n    function setInitialState () {\n      currentOrientation = config.orientation\n\n      // make sure position is valid\n      if (config.hasOwnProperty('position')) {\n        if (config.position === 'start') {\n          currentPosition = deepCopy(START_POSITION)\n        } else if (validFen(config.position)) {\n          currentPosition = fenToObj(config.position)\n        } else if (validPositionObject(config.position)) {\n          currentPosition = deepCopy(config.position)\n        } else {\n          error(\n              7263,\n              'Invalid value passed to config.position.',\n              config.position\n            )\n        }\n      }\n    }\n\n    // -------------------------------------------------------------------------\n    // DOM Misc\n    // -------------------------------------------------------------------------\n\n    // calculates square size based on the width of the container\n    // got a little CSS black magic here, so let me explain:\n    // get the width of the container element (could be anything), reduce by 1 for\n    // fudge factor, and then keep reducing until we find an exact mod 8 for\n    // our square size\n    function calculateSquareSize () {\n      var containerWidth = parseInt($container.width(), 10)\n\n      // defensive, prevent infinite loop\n      if (!containerWidth || containerWidth <= 0) {\n        return 0\n      }\n\n      // pad one pixel\n      var boardWidth = containerWidth - 1\n\n      while (boardWidth % 8 !== 0 && boardWidth > 0) {\n        boardWidth = boardWidth - 1\n      }\n\n      return boardWidth / 8\n    }\n\n    // create random IDs for elements\n    function createElIds () {\n      // squares on the board\n      for (var i = 0; i < COLUMNS.length; i++) {\n        for (var j = 1; j <= 8; j++) {\n          var square = COLUMNS[i] + j\n          squareElsIds[square] = square + '-' + uuid()\n        }\n      }\n\n      // spare pieces\n      var pieces = 'KQRNBP'.split('')\n      for (i = 0; i < pieces.length; i++) {\n        var whitePiece = 'w' + pieces[i]\n        var blackPiece = 'b' + pieces[i]\n        sparePiecesElsIds[whitePiece] = whitePiece + '-' + uuid()\n        sparePiecesElsIds[blackPiece] = blackPiece + '-' + uuid()\n      }\n    }\n\n    // -------------------------------------------------------------------------\n    // Markup Building\n    // -------------------------------------------------------------------------\n\n    function buildBoardHTML (orientation) {\n      if (orientation !== 'black') {\n        orientation = 'white'\n      }\n\n      var html = ''\n\n      // algebraic notation / orientation\n      var alpha = deepCopy(COLUMNS)\n      var row = 8\n      if (orientation === 'black') {\n        alpha.reverse()\n        row = 1\n      }\n\n      var squareColor = 'white'\n      for (var i = 0; i < 8; i++) {\n        html += '<div class=\"{row}\">'\n        for (var j = 0; j < 8; j++) {\n          var square = alpha[j] + row\n\n          html += '<div class=\"{square} ' + CSS[squareColor] + ' ' +\n            'square-' + square + '\" ' +\n            'style=\"width:' + squareSize + 'px;height:' + squareSize + 'px;\" ' +\n            'id=\"' + squareElsIds[square] + '\" ' +\n            'data-square=\"' + square + '\">'\n\n          if (config.showNotation) {\n            // alpha notation\n            if ((orientation === 'white' && row === 1) ||\n                (orientation === 'black' && row === 8)) {\n              html += '<div class=\"{notation} {alpha}\">' + alpha[j] + '</div>'\n            }\n\n            // numeric notation\n            if (j === 0) {\n              html += '<div class=\"{notation} {numeric}\">' + row + '</div>'\n            }\n          }\n\n          html += '</div>' // end .square\n\n          squareColor = (squareColor === 'white') ? 'black' : 'white'\n        }\n        html += '<div class=\"{clearfix}\"></div></div>'\n\n        squareColor = (squareColor === 'white') ? 'black' : 'white'\n\n        if (orientation === 'white') {\n          row = row - 1\n        } else {\n          row = row + 1\n        }\n      }\n\n      return interpolateTemplate(html, CSS)\n    }\n\n    function buildPieceImgSrc (piece) {\n      if (isFunction(config.pieceTheme)) {\n        return config.pieceTheme(piece)\n      }\n\n      if (isString(config.pieceTheme)) {\n        return interpolateTemplate(config.pieceTheme, {piece: piece})\n      }\n\n      // NOTE: this should never happen\n      error(8272, 'Unable to build image source for config.pieceTheme.')\n      return ''\n    }\n\n    function buildPieceHTML (piece, hidden, id) {\n      var html = '<img src=\"' + buildPieceImgSrc(piece) + '\" '\n      if (isString(id) && id !== '') {\n        html += 'id=\"' + id + '\" '\n      }\n      html += 'alt=\"\" ' +\n        'class=\"{piece}\" ' +\n        'data-piece=\"' + piece + '\" ' +\n        'style=\"width:' + squareSize + 'px;' + 'height:' + squareSize + 'px;'\n\n      if (hidden) {\n        html += 'display:none;'\n      }\n\n      html += '\" />'\n\n      return interpolateTemplate(html, CSS)\n    }\n\n    function buildSparePiecesHTML (color) {\n      var pieces = ['wK', 'wQ', 'wR', 'wB', 'wN', 'wP']\n      if (color === 'black') {\n        pieces = ['bK', 'bQ', 'bR', 'bB', 'bN', 'bP']\n      }\n\n      var html = ''\n      for (var i = 0; i < pieces.length; i++) {\n        html += buildPieceHTML(pieces[i], false, sparePiecesElsIds[pieces[i]])\n      }\n\n      return html\n    }\n\n    // -------------------------------------------------------------------------\n    // Animations\n    // -------------------------------------------------------------------------\n\n    function animateSquareToSquare (src, dest, piece, completeFn) {\n      // get information about the source and destination squares\n      var $srcSquare = $('#' + squareElsIds[src])\n      var srcSquarePosition = $srcSquare.offset()\n      var $destSquare = $('#' + squareElsIds[dest])\n      var destSquarePosition = $destSquare.offset()\n\n      // create the animated piece and absolutely position it\n      // over the source square\n      var animatedPieceId = uuid()\n      $('body').append(buildPieceHTML(piece, true, animatedPieceId))\n      var $animatedPiece = $('#' + animatedPieceId)\n      $animatedPiece.css({\n        display: '',\n        position: 'absolute',\n        top: srcSquarePosition.top,\n        left: srcSquarePosition.left\n      })\n\n      // remove original piece from source square\n      $srcSquare.find('.' + CSS.piece).remove()\n\n      function onFinishAnimation1 () {\n        // add the \"real\" piece to the destination square\n        $destSquare.append(buildPieceHTML(piece))\n\n        // remove the animated piece\n        $animatedPiece.remove()\n\n        // run complete function\n        if (isFunction(completeFn)) {\n          completeFn()\n        }\n      }\n\n      // animate the piece to the destination square\n      var opts = {\n        duration: config.moveSpeed,\n        complete: onFinishAnimation1\n      }\n      $animatedPiece.animate(destSquarePosition, opts)\n    }\n\n    function animateSparePieceToSquare (piece, dest, completeFn) {\n      var srcOffset = $('#' + sparePiecesElsIds[piece]).offset()\n      var $destSquare = $('#' + squareElsIds[dest])\n      var destOffset = $destSquare.offset()\n\n      // create the animate piece\n      var pieceId = uuid()\n      $('body').append(buildPieceHTML(piece, true, pieceId))\n      var $animatedPiece = $('#' + pieceId)\n      $animatedPiece.css({\n        display: '',\n        position: 'absolute',\n        left: srcOffset.left,\n        top: srcOffset.top\n      })\n\n      // on complete\n      function onFinishAnimation2 () {\n        // add the \"real\" piece to the destination square\n        $destSquare.find('.' + CSS.piece).remove()\n        $destSquare.append(buildPieceHTML(piece))\n\n        // remove the animated piece\n        $animatedPiece.remove()\n\n        // run complete function\n        if (isFunction(completeFn)) {\n          completeFn()\n        }\n      }\n\n      // animate the piece to the destination square\n      var opts = {\n        duration: config.moveSpeed,\n        complete: onFinishAnimation2\n      }\n      $animatedPiece.animate(destOffset, opts)\n    }\n\n    // execute an array of animations\n    function doAnimations (animations, oldPos, newPos) {\n      if (animations.length === 0) return\n\n      var numFinished = 0\n      function onFinishAnimation3 () {\n        // exit if all the animations aren't finished\n        numFinished = numFinished + 1\n        if (numFinished !== animations.length) return\n\n        drawPositionInstant()\n\n        // run their onMoveEnd function\n        if (isFunction(config.onMoveEnd)) {\n          config.onMoveEnd(deepCopy(oldPos), deepCopy(newPos))\n        }\n      }\n\n      for (var i = 0; i < animations.length; i++) {\n        var animation = animations[i]\n\n        // clear a piece\n        if (animation.type === 'clear') {\n          $('#' + squareElsIds[animation.square] + ' .' + CSS.piece)\n            .fadeOut(config.trashSpeed, onFinishAnimation3)\n\n        // add a piece with no spare pieces - fade the piece onto the square\n        } else if (animation.type === 'add' && !config.sparePieces) {\n          $('#' + squareElsIds[animation.square])\n            .append(buildPieceHTML(animation.piece, true))\n            .find('.' + CSS.piece)\n            .fadeIn(config.appearSpeed, onFinishAnimation3)\n\n        // add a piece with spare pieces - animate from the spares\n        } else if (animation.type === 'add' && config.sparePieces) {\n          animateSparePieceToSquare(animation.piece, animation.square, onFinishAnimation3)\n\n        // move a piece from squareA to squareB\n        } else if (animation.type === 'move') {\n          animateSquareToSquare(animation.source, animation.destination, animation.piece, onFinishAnimation3)\n        }\n      }\n    }\n\n    // calculate an array of animations that need to happen in order to get\n    // from pos1 to pos2\n    function calculateAnimations (pos1, pos2) {\n      // make copies of both\n      pos1 = deepCopy(pos1)\n      pos2 = deepCopy(pos2)\n\n      var animations = []\n      var squaresMovedTo = {}\n\n      // remove pieces that are the same in both positions\n      for (var i in pos2) {\n        if (!pos2.hasOwnProperty(i)) continue\n\n        if (pos1.hasOwnProperty(i) && pos1[i] === pos2[i]) {\n          delete pos1[i]\n          delete pos2[i]\n        }\n      }\n\n      // find all the \"move\" animations\n      for (i in pos2) {\n        if (!pos2.hasOwnProperty(i)) continue\n\n        var closestPiece = findClosestPiece(pos1, pos2[i], i)\n        if (closestPiece) {\n          animations.push({\n            type: 'move',\n            source: closestPiece,\n            destination: i,\n            piece: pos2[i]\n          })\n\n          delete pos1[closestPiece]\n          delete pos2[i]\n          squaresMovedTo[i] = true\n        }\n      }\n\n      // \"add\" animations\n      for (i in pos2) {\n        if (!pos2.hasOwnProperty(i)) continue\n\n        animations.push({\n          type: 'add',\n          square: i,\n          piece: pos2[i]\n        })\n\n        delete pos2[i]\n      }\n\n      // \"clear\" animations\n      for (i in pos1) {\n        if (!pos1.hasOwnProperty(i)) continue\n\n        // do not clear a piece if it is on a square that is the result\n        // of a \"move\", ie: a piece capture\n        if (squaresMovedTo.hasOwnProperty(i)) continue\n\n        animations.push({\n          type: 'clear',\n          square: i,\n          piece: pos1[i]\n        })\n\n        delete pos1[i]\n      }\n\n      return animations\n    }\n\n    // -------------------------------------------------------------------------\n    // Control Flow\n    // -------------------------------------------------------------------------\n\n    function drawPositionInstant () {\n      // clear the board\n      $board.find('.' + CSS.piece).remove()\n\n      // add the pieces\n      for (var i in currentPosition) {\n        if (!currentPosition.hasOwnProperty(i)) continue\n\n        $('#' + squareElsIds[i]).append(buildPieceHTML(currentPosition[i]))\n      }\n    }\n\n    function drawBoard () {\n      $board.html(buildBoardHTML(currentOrientation, squareSize, config.showNotation))\n      drawPositionInstant()\n\n      if (config.sparePieces) {\n        if (currentOrientation === 'white') {\n          $sparePiecesTop.html(buildSparePiecesHTML('black'))\n          $sparePiecesBottom.html(buildSparePiecesHTML('white'))\n        } else {\n          $sparePiecesTop.html(buildSparePiecesHTML('white'))\n          $sparePiecesBottom.html(buildSparePiecesHTML('black'))\n        }\n      }\n    }\n\n    function setCurrentPosition (position) {\n      var oldPos = deepCopy(currentPosition)\n      var newPos = deepCopy(position)\n      var oldFen = objToFen(oldPos)\n      var newFen = objToFen(newPos)\n\n      // do nothing if no change in position\n      if (oldFen === newFen) return\n\n      // run their onChange function\n      if (isFunction(config.onChange)) {\n        config.onChange(oldPos, newPos)\n      }\n\n      // update state\n      currentPosition = position\n    }\n\n    function isXYOnSquare (x, y) {\n      for (var i in squareElsOffsets) {\n        if (!squareElsOffsets.hasOwnProperty(i)) continue\n\n        var s = squareElsOffsets[i]\n        if (x >= s.left &&\n            x < s.left + squareSize &&\n            y >= s.top &&\n            y < s.top + squareSize) {\n          return i\n        }\n      }\n\n      return 'offboard'\n    }\n\n    // records the XY coords of every square into memory\n    function captureSquareOffsets () {\n      squareElsOffsets = {}\n\n      for (var i in squareElsIds) {\n        if (!squareElsIds.hasOwnProperty(i)) continue\n\n        squareElsOffsets[i] = $('#' + squareElsIds[i]).offset()\n      }\n    }\n\n    function removeSquareHighlights () {\n      $board\n        .find('.' + CSS.square)\n        .removeClass(CSS.highlight1 + ' ' + CSS.highlight2)\n    }\n\n    function snapbackDraggedPiece () {\n      // there is no \"snapback\" for spare pieces\n      if (draggedPieceSource === 'spare') {\n        trashDraggedPiece()\n        return\n      }\n\n      removeSquareHighlights()\n\n      // animation complete\n      function complete () {\n        drawPositionInstant()\n        $draggedPiece.css('display', 'none')\n\n        // run their onSnapbackEnd function\n        if (isFunction(config.onSnapbackEnd)) {\n          config.onSnapbackEnd(\n              draggedPiece,\n              draggedPieceSource,\n              deepCopy(currentPosition),\n              currentOrientation\n            )\n        }\n      }\n\n      // get source square position\n      var sourceSquarePosition = $('#' + squareElsIds[draggedPieceSource]).offset()\n\n      // animate the piece to the target square\n      var opts = {\n        duration: config.snapbackSpeed,\n        complete: complete\n      }\n      $draggedPiece.animate(sourceSquarePosition, opts)\n\n      // set state\n      isDragging = false\n    }\n\n    function trashDraggedPiece () {\n      removeSquareHighlights()\n\n      // remove the source piece\n      var newPosition = deepCopy(currentPosition)\n      delete newPosition[draggedPieceSource]\n      setCurrentPosition(newPosition)\n\n      // redraw the position\n      drawPositionInstant()\n\n      // hide the dragged piece\n      $draggedPiece.fadeOut(config.trashSpeed)\n\n      // set state\n      isDragging = false\n    }\n\n    function dropDraggedPieceOnSquare (square) {\n      removeSquareHighlights()\n\n      // update position\n      var newPosition = deepCopy(currentPosition)\n      delete newPosition[draggedPieceSource]\n      newPosition[square] = draggedPiece\n      setCurrentPosition(newPosition)\n\n      // get target square information\n      var targetSquarePosition = $('#' + squareElsIds[square]).offset()\n\n      // animation complete\n      function onAnimationComplete () {\n        drawPositionInstant()\n        $draggedPiece.css('display', 'none')\n\n        // execute their onSnapEnd function\n        if (isFunction(config.onSnapEnd)) {\n          config.onSnapEnd(draggedPieceSource, square, draggedPiece)\n        }\n      }\n\n      // snap the piece to the target square\n      var opts = {\n        duration: config.snapSpeed,\n        complete: onAnimationComplete\n      }\n      $draggedPiece.animate(targetSquarePosition, opts)\n\n      // set state\n      isDragging = false\n    }\n\n    function beginDraggingPiece (source, piece, x, y) {\n      // run their custom onDragStart function\n      // their custom onDragStart function can cancel drag start\n      if (isFunction(config.onDragStart) &&\n          config.onDragStart(source, piece, deepCopy(currentPosition), currentOrientation) === false) {\n        return\n      }\n\n      // set state\n      isDragging = true\n      draggedPiece = piece\n      draggedPieceSource = source\n\n      // if the piece came from spare pieces, location is offboard\n      if (source === 'spare') {\n        draggedPieceLocation = 'offboard'\n      } else {\n        draggedPieceLocation = source\n      }\n\n      // capture the x, y coords of all squares in memory\n      captureSquareOffsets()\n\n      // create the dragged piece\n      $draggedPiece.attr('src', buildPieceImgSrc(piece)).css({\n        display: '',\n        position: 'absolute',\n        left: x - squareSize / 2,\n        top: y - squareSize / 2\n      })\n\n      if (source !== 'spare') {\n        // highlight the source square and hide the piece\n        $('#' + squareElsIds[source])\n          .addClass(CSS.highlight1)\n          .find('.' + CSS.piece)\n          .css('display', 'none')\n      }\n    }\n\n    function updateDraggedPiece (x, y) {\n      // put the dragged piece over the mouse cursor\n      $draggedPiece.css({\n        left: x - squareSize / 2,\n        top: y - squareSize / 2\n      })\n\n      // get location\n      var location = isXYOnSquare(x, y)\n\n      // do nothing if the location has not changed\n      if (location === draggedPieceLocation) return\n\n      // remove highlight from previous square\n      if (validSquare(draggedPieceLocation)) {\n        $('#' + squareElsIds[draggedPieceLocation]).removeClass(CSS.highlight2)\n      }\n\n      // add highlight to new square\n      if (validSquare(location)) {\n        $('#' + squareElsIds[location]).addClass(CSS.highlight2)\n      }\n\n      // run onDragMove\n      if (isFunction(config.onDragMove)) {\n        config.onDragMove(\n            location,\n            draggedPieceLocation,\n            draggedPieceSource,\n            draggedPiece,\n            deepCopy(currentPosition),\n            currentOrientation\n          )\n      }\n\n      // update state\n      draggedPieceLocation = location\n    }\n\n    function stopDraggedPiece (location) {\n      // determine what the action should be\n      var action = 'drop'\n      if (location === 'offboard' && config.dropOffBoard === 'snapback') {\n        action = 'snapback'\n      }\n      if (location === 'offboard' && config.dropOffBoard === 'trash') {\n        action = 'trash'\n      }\n\n      // run their onDrop function, which can potentially change the drop action\n      if (isFunction(config.onDrop)) {\n        var newPosition = deepCopy(currentPosition)\n\n        // source piece is a spare piece and position is off the board\n        // if (draggedPieceSource === 'spare' && location === 'offboard') {...}\n        // position has not changed; do nothing\n\n        // source piece is a spare piece and position is on the board\n        if (draggedPieceSource === 'spare' && validSquare(location)) {\n          // add the piece to the board\n          newPosition[location] = draggedPiece\n        }\n\n        // source piece was on the board and position is off the board\n        if (validSquare(draggedPieceSource) && location === 'offboard') {\n          // remove the piece from the board\n          delete newPosition[draggedPieceSource]\n        }\n\n        // source piece was on the board and position is on the board\n        if (validSquare(draggedPieceSource) && validSquare(location)) {\n          // move the piece\n          delete newPosition[draggedPieceSource]\n          newPosition[location] = draggedPiece\n        }\n\n        var oldPosition = deepCopy(currentPosition)\n\n        var result = config.onDrop(\n            draggedPieceSource,\n            location,\n            draggedPiece,\n            newPosition,\n            oldPosition,\n            currentOrientation\n          )\n        if (result === 'snapback' || result === 'trash') {\n          action = result\n        }\n      }\n\n      // do it!\n      if (action === 'snapback') {\n        snapbackDraggedPiece()\n      } else if (action === 'trash') {\n        trashDraggedPiece()\n      } else if (action === 'drop') {\n        dropDraggedPieceOnSquare(location)\n      }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    // clear the board\n    widget.clear = function (useAnimation) {\n      widget.position({}, useAnimation)\n    }\n\n    // remove the widget from the page\n    widget.destroy = function () {\n      // remove markup\n      $container.html('')\n      $draggedPiece.remove()\n\n      // remove event handlers\n      $container.unbind()\n    }\n\n    // shorthand method to get the current FEN\n    widget.fen = function () {\n      return widget.position('fen')\n    }\n\n    // flip orientation\n    widget.flip = function () {\n      return widget.orientation('flip')\n    }\n\n    // move pieces\n    // TODO: this method should be variadic as well as accept an array of moves\n    widget.move = function () {\n      // no need to throw an error here; just do nothing\n      // TODO: this should return the current position\n      if (arguments.length === 0) return\n\n      var useAnimation = true\n\n      // collect the moves into an object\n      var moves = {}\n      for (var i = 0; i < arguments.length; i++) {\n        // any \"false\" to this function means no animations\n        if (arguments[i] === false) {\n          useAnimation = false\n          continue\n        }\n\n        // skip invalid arguments\n        if (!validMove(arguments[i])) {\n          error(2826, 'Invalid move passed to the move method.', arguments[i])\n          continue\n        }\n\n        var tmp = arguments[i].split('-')\n        moves[tmp[0]] = tmp[1]\n      }\n\n      // calculate position from moves\n      var newPos = calculatePositionFromMoves(currentPosition, moves)\n\n      // update the board\n      widget.position(newPos, useAnimation)\n\n      // return the new position object\n      return newPos\n    }\n\n    widget.orientation = function (arg) {\n      // no arguments, return the current orientation\n      if (arguments.length === 0) {\n        return currentOrientation\n      }\n\n      // set to white or black\n      if (arg === 'white' || arg === 'black') {\n        currentOrientation = arg\n        drawBoard()\n        return currentOrientation\n      }\n\n      // flip orientation\n      if (arg === 'flip') {\n        currentOrientation = currentOrientation === 'white' ? 'black' : 'white'\n        drawBoard()\n        return currentOrientation\n      }\n\n      error(5482, 'Invalid value passed to the orientation method.', arg)\n    }\n\n    widget.position = function (position, useAnimation) {\n      // no arguments, return the current position\n      if (arguments.length === 0) {\n        return deepCopy(currentPosition)\n      }\n\n      // get position as FEN\n      if (isString(position) && position.toLowerCase() === 'fen') {\n        return objToFen(currentPosition)\n      }\n\n      // start position\n      if (isString(position) && position.toLowerCase() === 'start') {\n        position = deepCopy(START_POSITION)\n      }\n\n      // convert FEN to position object\n      if (validFen(position)) {\n        position = fenToObj(position)\n      }\n\n      // validate position object\n      if (!validPositionObject(position)) {\n        error(6482, 'Invalid value passed to the position method.', position)\n        return\n      }\n\n      // default for useAnimations is true\n      if (useAnimation !== false) useAnimation = true\n\n      if (useAnimation) {\n        // start the animations\n        var animations = calculateAnimations(currentPosition, position)\n        doAnimations(animations, currentPosition, position)\n\n        // set the new position\n        setCurrentPosition(position)\n      } else {\n        // instant update\n        setCurrentPosition(position)\n        drawPositionInstant()\n      }\n    }\n\n    widget.resize = function () {\n      // calulate the new square size\n      squareSize = calculateSquareSize()\n\n      // set board width\n      $board.css('width', squareSize * 8 + 'px')\n\n      // set drag piece size\n      $draggedPiece.css({\n        height: squareSize,\n        width: squareSize\n      })\n\n      // spare pieces\n      if (config.sparePieces) {\n        $container\n          .find('.' + CSS.sparePieces)\n          .css('paddingLeft', squareSize + boardBorderSize + 'px')\n      }\n\n      // redraw the board\n      drawBoard()\n    }\n\n    // set the starting position\n    widget.start = function (useAnimation) {\n      widget.position('start', useAnimation)\n    }\n\n    // -------------------------------------------------------------------------\n    // Browser Events\n    // -------------------------------------------------------------------------\n\n    function stopDefault (evt) {\n      evt.preventDefault()\n    }\n\n    function mousedownSquare (evt) {\n       // do nothing if we're not draggable\n      if (!config.draggable) return\n\n      // do nothing if there is no piece on this square\n      var square = $(this).attr('data-square')\n      if (!validSquare(square)) return\n      if (!currentPosition.hasOwnProperty(square)) return\n\n      beginDraggingPiece(square, currentPosition[square], evt.pageX, evt.pageY)\n    }\n\n    function touchstartSquare (e) {\n      // do nothing if we're not draggable\n      if (!config.draggable) return\n\n      // do nothing if there is no piece on this square\n      var square = $(this).attr('data-square')\n      if (!validSquare(square)) return\n      if (!currentPosition.hasOwnProperty(square)) return\n\n      e = e.originalEvent\n      beginDraggingPiece(\n          square,\n          currentPosition[square],\n          e.changedTouches[0].pageX,\n          e.changedTouches[0].pageY\n        )\n    }\n\n    function mousedownSparePiece (evt) {\n      // do nothing if sparePieces is not enabled\n      if (!config.sparePieces) return\n\n      var piece = $(this).attr('data-piece')\n\n      beginDraggingPiece('spare', piece, evt.pageX, evt.pageY)\n    }\n\n    function touchstartSparePiece (e) {\n      // do nothing if sparePieces is not enabled\n      if (!config.sparePieces) return\n\n      var piece = $(this).attr('data-piece')\n\n      e = e.originalEvent\n      beginDraggingPiece(\n          'spare',\n          piece,\n          e.changedTouches[0].pageX,\n          e.changedTouches[0].pageY\n        )\n    }\n\n    function mousemoveWindow (evt) {\n      if (isDragging) {\n        updateDraggedPiece(evt.pageX, evt.pageY)\n      }\n    }\n\n    var throttledMousemoveWindow = throttle(mousemoveWindow, config.dragThrottleRate)\n\n    function touchmoveWindow (evt) {\n      // do nothing if we are not dragging a piece\n      if (!isDragging) return\n\n      // prevent screen from scrolling\n      evt.preventDefault()\n\n      updateDraggedPiece(evt.originalEvent.changedTouches[0].pageX,\n                         evt.originalEvent.changedTouches[0].pageY)\n    }\n\n    var throttledTouchmoveWindow = throttle(touchmoveWindow, config.dragThrottleRate)\n\n    function mouseupWindow (evt) {\n      // do nothing if we are not dragging a piece\n      if (!isDragging) return\n\n      // get the location\n      var location = isXYOnSquare(evt.pageX, evt.pageY)\n\n      stopDraggedPiece(location)\n    }\n\n    function touchendWindow (evt) {\n      // do nothing if we are not dragging a piece\n      if (!isDragging) return\n\n      // get the location\n      var location = isXYOnSquare(evt.originalEvent.changedTouches[0].pageX,\n                                  evt.originalEvent.changedTouches[0].pageY)\n\n      stopDraggedPiece(location)\n    }\n\n    function mouseenterSquare (evt) {\n      // do not fire this event if we are dragging a piece\n      // NOTE: this should never happen, but it's a safeguard\n      if (isDragging) return\n\n      // exit if they did not provide a onMouseoverSquare function\n      if (!isFunction(config.onMouseoverSquare)) return\n\n      // get the square\n      var square = $(evt.currentTarget).attr('data-square')\n\n      // NOTE: this should never happen; defensive\n      if (!validSquare(square)) return\n\n      // get the piece on this square\n      var piece = false\n      if (currentPosition.hasOwnProperty(square)) {\n        piece = currentPosition[square]\n      }\n\n      // execute their function\n      config.onMouseoverSquare(square, piece, deepCopy(currentPosition), currentOrientation)\n    }\n\n    function mouseleaveSquare (evt) {\n      // do not fire this event if we are dragging a piece\n      // NOTE: this should never happen, but it's a safeguard\n      if (isDragging) return\n\n      // exit if they did not provide an onMouseoutSquare function\n      if (!isFunction(config.onMouseoutSquare)) return\n\n      // get the square\n      var square = $(evt.currentTarget).attr('data-square')\n\n      // NOTE: this should never happen; defensive\n      if (!validSquare(square)) return\n\n      // get the piece on this square\n      var piece = false\n      if (currentPosition.hasOwnProperty(square)) {\n        piece = currentPosition[square]\n      }\n\n      // execute their function\n      config.onMouseoutSquare(square, piece, deepCopy(currentPosition), currentOrientation)\n    }\n\n    // -------------------------------------------------------------------------\n    // Initialization\n    // -------------------------------------------------------------------------\n\n    function addEvents () {\n      // prevent \"image drag\"\n      $('body').on('mousedown mousemove', '.' + CSS.piece, stopDefault)\n\n      // mouse drag pieces\n      $board.on('mousedown', '.' + CSS.square, mousedownSquare)\n      $container.on('mousedown', '.' + CSS.sparePieces + ' .' + CSS.piece, mousedownSparePiece)\n\n      // mouse enter / leave square\n      $board\n        .on('mouseenter', '.' + CSS.square, mouseenterSquare)\n        .on('mouseleave', '.' + CSS.square, mouseleaveSquare)\n\n      // piece drag\n      var $window = $(window)\n      $window\n        .on('mousemove', throttledMousemoveWindow)\n        .on('mouseup', mouseupWindow)\n\n      // touch drag pieces\n      if (isTouchDevice()) {\n        $board.on('touchstart', '.' + CSS.square, touchstartSquare)\n        $container.on('touchstart', '.' + CSS.sparePieces + ' .' + CSS.piece, touchstartSparePiece)\n        $window\n          .on('touchmove', throttledTouchmoveWindow)\n          .on('touchend', touchendWindow)\n      }\n    }\n\n    function initDOM () {\n      // create unique IDs for all the elements we will create\n      createElIds()\n\n      // build board and save it in memory\n      $container.html(buildContainerHTML(config.sparePieces))\n      $board = $container.find('.' + CSS.board)\n\n      if (config.sparePieces) {\n        $sparePiecesTop = $container.find('.' + CSS.sparePiecesTop)\n        $sparePiecesBottom = $container.find('.' + CSS.sparePiecesBottom)\n      }\n\n      // create the drag piece\n      var draggedPieceId = uuid()\n      $('body').append(buildPieceHTML('wP', true, draggedPieceId))\n      $draggedPiece = $('#' + draggedPieceId)\n\n      // TODO: need to remove this dragged piece element if the board is no\n      // longer in the DOM\n\n      // get the border size\n      boardBorderSize = parseInt($board.css('borderLeftWidth'), 10)\n\n      // set the size and draw the board\n      widget.resize()\n    }\n\n    // -------------------------------------------------------------------------\n    // Initialization\n    // -------------------------------------------------------------------------\n\n    setInitialState()\n    initDOM()\n    addEvents()\n\n    // return the widget object\n    return widget\n  } // end constructor\n\n  // TODO: do module exports here\n  window['Chessboard'] = constructor\n\n  // support legacy ChessBoard name\n  window['ChessBoard'] = window['Chessboard']\n\n  // expose util functions\n  window['Chessboard']['fenToObj'] = fenToObj\n  window['Chessboard']['objToFen'] = objToFen\n})() // end anonymous wrapper\n\n\n//# sourceURL=webpack:///./js/chessboard.js?");

/***/ }),

/***/ "./node_modules/chess.js/chess.js":
/*!****************************************!*\
  !*** ./node_modules/chess.js/chess.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/* minified license below  */\n\n/* @license\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\n * Released under the BSD license\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\n */\n\nvar Chess = function(fen) {\n\n  /* jshint indent: false */\n\n  var BLACK = 'b';\n  var WHITE = 'w';\n\n  var EMPTY = -1;\n\n  var PAWN = 'p';\n  var KNIGHT = 'n';\n  var BISHOP = 'b';\n  var ROOK = 'r';\n  var QUEEN = 'q';\n  var KING = 'k';\n\n  var SYMBOLS = 'pnbrqkPNBRQK';\n\n  var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\n  var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15]\n  };\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14,  18, 33, 31,  14],\n    b: [-17, -15,  17,  15],\n    r: [-16,   1,  16,  -1],\n    q: [-17, -16, -15,   1,  17, 16, 15,  -1],\n    k: [-17, -16, -15,   1,  17, 16, 15,  -1]\n  };\n\n  var ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n  ];\n\n  var RAYS = [\n     17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n      0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n      0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n      0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n      0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n      1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n      0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n      0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n      0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n      0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n      0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n    -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n  ];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\n\n  var FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q'\n  };\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64\n  };\n\n  var RANK_1 = 7;\n  var RANK_2 = 6;\n  var RANK_3 = 5;\n  var RANK_4 = 4;\n  var RANK_5 = 3;\n  var RANK_6 = 2;\n  var RANK_7 = 1;\n  var RANK_8 = 0;\n\n  var SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n  var ROOKS = {\n    w: [{square: SQUARES.a1, flag: BITS.QSIDE_CASTLE},\n        {square: SQUARES.h1, flag: BITS.KSIDE_CASTLE}],\n    b: [{square: SQUARES.a8, flag: BITS.QSIDE_CASTLE},\n        {square: SQUARES.h8, flag: BITS.KSIDE_CASTLE}]\n  };\n\n  var board = new Array(128);\n  var kings = {w: EMPTY, b: EMPTY};\n  var turn = WHITE;\n  var castling = {w: 0, b: 0};\n  var ep_square = EMPTY;\n  var half_moves = 0;\n  var move_number = 1;\n  var history = [];\n  var header = {};\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    load(DEFAULT_POSITION);\n  } else {\n    load(fen);\n  }\n\n  function clear() {\n    board = new Array(128);\n    kings = {w: EMPTY, b: EMPTY};\n    turn = WHITE;\n    castling = {w: 0, b: 0};\n    ep_square = EMPTY;\n    half_moves = 0;\n    move_number = 1;\n    history = [];\n    header = {};\n    update_setup(generate_fen());\n  }\n\n  function reset() {\n    load(DEFAULT_POSITION);\n  }\n\n  function load(fen) {\n    var tokens = fen.split(/\\s+/);\n    var position = tokens[0];\n    var square = 0;\n\n    if (!validate_fen(fen).valid) {\n      return false;\n    }\n\n    clear();\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i);\n\n      if (piece === '/') {\n        square += 8;\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        var color = (piece < 'a') ? WHITE : BLACK;\n        put({type: piece.toLowerCase(), color: color}, algebraic(square));\n        square++;\n      }\n    }\n\n    turn = tokens[1];\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE;\n    }\n\n    ep_square = (tokens[3] === '-') ? EMPTY : SQUARES[tokens[3]];\n    half_moves = parseInt(tokens[4], 10);\n    move_number = parseInt(tokens[5], 10);\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function validate_fen(fen) {\n    var errors = {\n       0: 'No errors.',\n       1: 'FEN string must contain six space-delimited fields.',\n       2: '6th field (move number) must be a positive integer.',\n       3: '5th field (half move counter) must be a non-negative integer.',\n       4: '4th field (en-passant square) is invalid.',\n       5: '3rd field (castling availability) is invalid.',\n       6: '2nd field (side to move) is invalid.',\n       7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\n       8: '1st field (piece positions) is invalid [consecutive numbers].',\n       9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square',\n    };\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n      return {valid: false, error_number: 1, error: errors[1]};\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || (parseInt(tokens[5], 10) <= 0)) {\n      return {valid: false, error_number: 2, error: errors[2]};\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || (parseInt(tokens[4], 10) < 0)) {\n      return {valid: false, error_number: 3, error: errors[3]};\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return {valid: false, error_number: 4, error: errors[4]};\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if( !/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return {valid: false, error_number: 5, error: errors[5]};\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return {valid: false, error_number: 6, error: errors[6]};\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n      return {valid: false, error_number: 7, error: errors[7]};\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0;\n      var previous_was_number = false;\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return {valid: false, error_number: 8, error: errors[8]};\n          }\n          sum_fields += parseInt(rows[i][k], 10);\n          previous_was_number = true;\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return {valid: false, error_number: 9, error: errors[9]};\n          }\n          sum_fields += 1;\n          previous_was_number = false;\n        }\n      }\n      if (sum_fields !== 8) {\n        return {valid: false, error_number: 10, error: errors[10]};\n      }\n    }\n\n    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\n        (tokens[3][1] == '6' && tokens[1] == 'b')) {\n          return {valid: false, error_number: 11, error: errors[11]};\n    }\n\n    /* everything's okay! */\n    return {valid: true, error_number: 0, error: errors[0]};\n  }\n\n  function generate_fen() {\n    var empty = 0;\n    var fen = '';\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (board[i] == null) {\n        empty++;\n      } else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        var color = board[i].color;\n        var piece = board[i].type;\n\n        fen += (color === WHITE) ?\n                 piece.toUpperCase() : piece.toLowerCase();\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += '/';\n        }\n\n        empty = 0;\n        i += 8;\n      }\n    }\n\n    var cflags = '';\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) { cflags += 'K'; }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) { cflags += 'Q'; }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) { cflags += 'k'; }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) { cflags += 'q'; }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-';\n    var epflags = (ep_square === EMPTY) ? '-' : algebraic(ep_square);\n\n    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ');\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' &&\n          typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1];\n      }\n    }\n    return header;\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (history.length > 0) return;\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1';\n      header['FEN'] = fen;\n    } else {\n      delete header['SetUp'];\n      delete header['FEN'];\n    }\n  }\n\n  function get(square) {\n    var piece = board[SQUARES[square]];\n    return (piece) ? {type: piece.type, color: piece.color} : null;\n  }\n\n  function put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false;\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false;\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false;\n    }\n\n    var sq = SQUARES[square];\n\n    /* don't let the user place more than one king */\n    if (piece.type == KING &&\n        !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\n      return false;\n    }\n\n    board[sq] = {type: piece.type, color: piece.color};\n    if (piece.type === KING) {\n      kings[piece.color] = sq;\n    }\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  function remove(square) {\n    var piece = get(square);\n    board[SQUARES[square]] = null;\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY;\n    }\n\n    update_setup(generate_fen());\n\n    return piece;\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type\n    };\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION;\n      move.promotion = promotion;\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type;\n    } else if (flags & BITS.EP_CAPTURE) {\n        move.captured = PAWN;\n    }\n    return move;\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (board[from].type === PAWN &&\n         (rank(to) === RANK_8 || rank(to) === RANK_1)) {\n          var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\n          for (var i = 0, len = pieces.length; i < len; i++) {\n            moves.push(build_move(board, from, to, flags, pieces[i]));\n          }\n      } else {\n       moves.push(build_move(board, from, to, flags));\n      }\n    }\n\n    var moves = [];\n    var us = turn;\n    var them = swap_color(us);\n    var second_rank = {b: RANK_7, w: RANK_2};\n\n    var first_sq = SQUARES.a8;\n    var last_sq = SQUARES.h1;\n    var single_square = false;\n\n    /* do we want legal moves? */\n    var legal = (typeof options !== 'undefined' && 'legal' in options) ?\n                options.legal : true;\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square];\n        single_square = true;\n      } else {\n        /* invalid square */\n        return [];\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) { i += 7; continue; }\n\n      var piece = board[i];\n      if (piece == null || piece.color !== us) {\n        continue;\n      }\n\n      if (piece.type === PAWN) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0];\n        if (board[square] == null) {\n            add_move(board, moves, i, square, BITS.NORMAL);\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1];\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN);\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j];\n          if (square & 0x88) continue;\n\n          if (board[square] != null &&\n              board[square].color === them) {\n              add_move(board, moves, i, square, BITS.CAPTURE);\n          } else if (square === ep_square) {\n              add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);\n          }\n        }\n      } else {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j];\n          var square = i;\n\n          while (true) {\n            square += offset;\n            if (square & 0x88) break;\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL);\n            } else {\n              if (board[square].color === us) break;\n              add_move(board, moves, i, square, BITS.CAPTURE);\n              break;\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break;\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if ((!single_square) || last_sq === kings[us]) {\n      /* king-side castling */\n      if (castling[us] & BITS.KSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from + 2;\n\n        if (board[castling_from + 1] == null &&\n            board[castling_to]       == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from + 1) &&\n            !attacked(them, castling_to)) {\n          add_move(board, moves, kings[us] , castling_to,\n                   BITS.KSIDE_CASTLE);\n        }\n      }\n\n      /* queen-side castling */\n      if (castling[us] & BITS.QSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from - 2;\n\n        if (board[castling_from - 1] == null &&\n            board[castling_from - 2] == null &&\n            board[castling_from - 3] == null &&\n            !attacked(them, kings[us]) &&\n            !attacked(them, castling_from - 1) &&\n            !attacked(them, castling_to)) {\n          add_move(board, moves, kings[us], castling_to,\n                   BITS.QSIDE_CASTLE);\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves;\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = [];\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i]);\n      }\n      undo_move();\n    }\n\n    return legal_moves;\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, sloppy) {\n\n    var output = '';\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else {\n      var disambiguator = get_disambiguator(move, sloppy);\n\n      if (move.piece !== PAWN) {\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n\n      output += algebraic(move.to);\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n\n    make_move(move);\n    if (in_check()) {\n      if (in_checkmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    undo_move();\n\n    return output;\n  }\n\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/,'').replace(/[+#]?[?!]*$/,'');\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) { i += 7; continue; }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue;\n\n      var piece = board[i];\n      var difference = i - square;\n      var index = difference + 119;\n\n      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true;\n          } else {\n            if (piece.color === BLACK) return true;\n          }\n          continue;\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true;\n\n        var offset = RAYS[index];\n        var j = i + offset;\n\n        var blocked = false;\n        while (j !== square) {\n          if (board[j] != null) { blocked = true; break; }\n          j += offset;\n        }\n\n        if (!blocked) return true;\n      }\n    }\n\n    return false;\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color]);\n  }\n\n  function in_check() {\n    return king_attacked(turn);\n  }\n\n  function in_checkmate() {\n    return in_check() && generate_moves().length === 0;\n  }\n\n  function in_stalemate() {\n    return !in_check() && generate_moves().length === 0;\n  }\n\n  function insufficient_material() {\n    var pieces = {};\n    var bishops = [];\n    var num_pieces = 0;\n    var sq_color = 0;\n\n    for (var i = SQUARES.a8; i<= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2;\n      if (i & 0x88) { i += 7; continue; }\n\n      var piece = board[i];\n      if (piece) {\n        pieces[piece.type] = (piece.type in pieces) ?\n                              pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color);\n        }\n        num_pieces++;\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) { return true; }\n\n    /* k vs. kn .... or .... k vs. kb */\n    else if (num_pieces === 3 && (pieces[BISHOP] === 1 ||\n                                 pieces[KNIGHT] === 1)) { return true; }\n\n    /* kb vs. kb where any number of bishops are all on the same color */\n    else if (num_pieces === pieces[BISHOP] + 2) {\n      var sum = 0;\n      var len = bishops.length;\n      for (var i = 0; i < len; i++) {\n        sum += bishops[i];\n      }\n      if (sum === 0 || sum === len) { return true; }\n    }\n\n    return false;\n  }\n\n  function in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = [];\n    var positions = {};\n    var repetition = false;\n\n    while (true) {\n      var move = undo_move();\n      if (!move) break;\n      moves.push(move);\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0,4).join(' ');\n\n      /* has the position occurred three or move times */\n      positions[fen] = (fen in positions) ? positions[fen] + 1 : 1;\n      if (positions[fen] >= 3) {\n        repetition = true;\n      }\n\n      if (!moves.length) {\n        break;\n      }\n      make_move(moves.pop());\n    }\n\n    return repetition;\n  }\n\n  function push(move) {\n    history.push({\n      move: move,\n      kings: {b: kings.b, w: kings.w},\n      turn: turn,\n      castling: {b: castling.b, w: castling.w},\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number\n    });\n  }\n\n  function make_move(move) {\n    var us = turn;\n    var them = swap_color(us);\n    push(move);\n\n    board[move.to] = board[move.from];\n    board[move.from] = null;\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (turn === BLACK) {\n        board[move.to - 16] = null;\n      } else {\n        board[move.to + 16] = null;\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = {type: move.promotion, color: us};\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to;\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1;\n        var castling_from = move.to + 1;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1;\n        var castling_from = move.to - 2;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      }\n\n      /* turn off castling */\n      castling[us] = '';\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square &&\n            castling[us] & ROOKS[us][i].flag) {\n          castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square &&\n            castling[them] & ROOKS[them][i].flag) {\n          castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (turn === 'b') {\n        ep_square = move.to - 16;\n      } else {\n        ep_square = move.to + 16;\n      }\n    } else {\n      ep_square = EMPTY;\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0;\n    } else {\n      half_moves++;\n    }\n\n    if (turn === BLACK) {\n      move_number++;\n    }\n    turn = swap_color(turn);\n  }\n\n  function undo_move() {\n    var old = history.pop();\n    if (old == null) { return null; }\n\n    var move = old.move;\n    kings = old.kings;\n    turn = old.turn;\n    castling = old.castling;\n    ep_square = old.ep_square;\n    half_moves = old.half_moves;\n    move_number = old.move_number;\n\n    var us = turn;\n    var them = swap_color(turn);\n\n    board[move.from] = board[move.to];\n    board[move.from].type = move.piece;  // to undo any promotions\n    board[move.to] = null;\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = {type: move.captured, color: them};\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index;\n      if (us === BLACK) {\n        index = move.to - 16;\n      } else {\n        index = move.to + 16;\n      }\n      board[index] = {type: PAWN, color: them};\n    }\n\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1;\n        castling_from = move.to - 1;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2;\n        castling_from = move.to + 1;\n      }\n\n      board[castling_to] = board[castling_from];\n      board[castling_from] = null;\n    }\n\n    return move;\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, sloppy) {\n    var moves = generate_moves({legal: !sloppy});\n\n    var from = move.from;\n    var to = move.to;\n    var piece = move.piece;\n\n    var ambiguities = 0;\n    var same_rank = 0;\n    var same_file = 0;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from;\n      var ambig_to = moves[i].to;\n      var ambig_piece = moves[i].piece;\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++;\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++;\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++;\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from);\n      }\n      /* if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      else if (same_file > 0) {\n        return algebraic(from).charAt(1);\n      }\n      /* else use the file symbol */\n      else {\n        return algebraic(from).charAt(0);\n      }\n    }\n\n    return '';\n  }\n\n  function ascii() {\n    var s = '   +------------------------+\\n';\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |';\n      }\n\n      /* empty piece */\n      if (board[i] == null) {\n        s += ' . ';\n      } else {\n        var piece = board[i].type;\n        var color = board[i].color;\n        var symbol = (color === WHITE) ?\n                     piece.toUpperCase() : piece.toLowerCase();\n        s += ' ' + symbol + ' ';\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n';\n        i += 8;\n      }\n    }\n    s += '   +------------------------+\\n';\n    s += '     a  b  c  d  e  f  g  h\\n';\n\n    return s;\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move);\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n      if (matches) {\n        var piece = matches[1];\n        var from = matches[2];\n        var to = matches[3];\n        var promotion = matches[4];\n      }\n    }\n\n    var moves = generate_moves();\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if ((clean_move === stripped_san(move_to_san(moves[i]))) ||\n          (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))) {\n        return moves[i];\n      } else {\n        if (matches &&\n            (!piece || piece.toLowerCase() == moves[i].piece) &&\n            SQUARES[from] == moves[i].from &&\n            SQUARES[to] == moves[i].to &&\n            (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n          return moves[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4;\n  }\n\n  function file(i) {\n    return i & 15;\n  }\n\n  function algebraic(i){\n    var f = file(i), r = rank(i);\n    return 'abcdefgh'.substring(f,f+1) + '87654321'.substring(r,r+1);\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE;\n  }\n\n  function is_digit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move);\n    move.san = move_to_san(move, false);\n    move.to = algebraic(move.to);\n    move.from = algebraic(move.from);\n\n    var flags = '';\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag];\n      }\n    }\n    move.flags = flags;\n\n    return move;\n  }\n\n  function clone(obj) {\n    var dupe = (obj instanceof Array) ? [] : {};\n\n    for (var property in obj) {\n      if (typeof property === 'object') {\n        dupe[property] = clone(obj[property]);\n      } else {\n        dupe[property] = obj[property];\n      }\n    }\n\n    return dupe;\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function perft(depth) {\n    var moves = generate_moves({legal: false});\n    var nodes = 0;\n    var color = turn;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = perft(depth - 1);\n          nodes += child_nodes;\n        } else {\n          nodes++;\n        }\n      }\n      undo_move();\n    }\n\n    return nodes;\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    SQUARES: (function() {\n                /* from the ECMA-262 spec (section 12.6.4):\n                 * \"The mechanics of enumerating the properties ... is\n                 * implementation dependent\"\n                 * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n                 * ordered correctly\n                 */\n                var keys = [];\n                for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n                  if (i & 0x88) { i += 7; continue; }\n                  keys.push(algebraic(i));\n                }\n                return keys;\n              })(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function(fen) {\n      return load(fen);\n    },\n\n    reset: function() {\n      return reset();\n    },\n\n    moves: function(options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options);\n      var moves = [];\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (typeof options !== 'undefined' && 'verbose' in options &&\n            options.verbose) {\n          moves.push(make_pretty(ugly_moves[i]));\n        } else {\n          moves.push(move_to_san(ugly_moves[i], false));\n        }\n      }\n\n      return moves;\n    },\n\n    in_check: function() {\n      return in_check();\n    },\n\n    in_checkmate: function() {\n      return in_checkmate();\n    },\n\n    in_stalemate: function() {\n      return in_stalemate();\n    },\n\n    in_draw: function() {\n      return half_moves >= 100 ||\n             in_stalemate() ||\n             insufficient_material() ||\n             in_threefold_repetition();\n    },\n\n    insufficient_material: function() {\n      return insufficient_material();\n    },\n\n    in_threefold_repetition: function() {\n      return in_threefold_repetition();\n    },\n\n    game_over: function() {\n      return half_moves >= 100 ||\n             in_checkmate() ||\n             in_stalemate() ||\n             insufficient_material() ||\n             in_threefold_repetition();\n    },\n\n    validate_fen: function(fen) {\n      return validate_fen(fen);\n    },\n\n    fen: function() {\n      return generate_fen();\n    },\n\n    pgn: function(options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline = (typeof options === 'object' &&\n                     typeof options.newline_char === 'string') ?\n                     options.newline_char : '\\n';\n      var max_width = (typeof options === 'object' &&\n                       typeof options.max_width === 'number') ?\n                       options.max_width : 0;\n      var result = [];\n      var header_exists = false;\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \\\"' + header[i] + '\\\"]' + newline);\n        header_exists = true;\n      }\n\n      if (header_exists && history.length) {\n        result.push(newline);\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = [];\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      var moves = [];\n      var move_string = '';\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!history.length && move.color === 'b') {\n          move_string = move_number + '. ...';\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string);\n          }\n          move_string = move_number + '.';\n        }\n\n        move_string = move_string + ' ' + move_to_san(move, false);\n        make_move(move);\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(move_string);\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result);\n      }\n\n      /* history should be back to what is was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ');\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0;\n      for (var i = 0; i < moves.length; i++) {\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop();\n          }\n\n          result.push(newline);\n          current_width = 0;\n        } else if (i !== 0) {\n          result.push(' ');\n          current_width++;\n        }\n        result.push(moves[i]);\n        current_width += moves[i].length;\n      }\n\n      return result.join('');\n    },\n\n    load_pgn: function(pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\n                    options.sloppy : false;\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\');\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true;\n        }\n        return false;\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char = (typeof options === 'object' &&\n                            typeof options.newline_char === 'string') ?\n                            options.newline_char : '\\r?\\n';\n        var header_obj = {};\n        var headers = header.split(new RegExp(mask(newline_char)));\n        var key = '';\n        var value = '';\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1');\n          if (trim(key).length > 0) {\n            header_obj[key] = value;\n          }\n        }\n\n        return header_obj;\n      }\n\n      var newline_char = (typeof options === 'object' &&\n                          typeof options.newline_char === 'string') ?\n                          options.newline_char : '\\r?\\n';\n      var regex = new RegExp('^(\\\\[(.|' + mask(newline_char) + ')*\\\\])' +\n                             '(' + mask(newline_char) + ')*' +\n                             '1.(' + mask(newline_char) + '|.)*$', 'g');\n\n      /* get header part of the PGN file */\n      var header_string = pgn.replace(regex, '$1');\n\n      /* no info part given, begins with moves */\n      if (header_string[0] !== '[') {\n        header_string = '';\n      }\n\n      reset();\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options);\n      for (var key in headers) {\n        set_header([key, headers[key]]);\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n      * [FEN position] */\n      if (headers['SetUp'] === '1') {\n          if (!(('FEN' in headers) && load(headers['FEN']))) {\n            return false;\n          }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn.replace(header_string, '').replace(new RegExp(mask(newline_char), 'g'), ' ');\n\n      /* delete comments */\n      ms = ms.replace(/(\\{[^}]+\\})+?/g, '');\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '');\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '');\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '');\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/));\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',');\n      var move = '';\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        move = move_from_san(moves[half_move], sloppy);\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1];\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === 'undefined') {\n          set_header(['Result', move]);\n        }\n      }\n      else {\n        move = move_from_san(move, sloppy);\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n      return true;\n    },\n\n    header: function() {\n      return set_header(arguments);\n    },\n\n    ascii: function() {\n      return ascii();\n    },\n\n    turn: function() {\n      return turn;\n    },\n\n    move: function(move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\n                    options.sloppy : false;\n\n      var move_obj = null;\n\n      if (typeof move === 'string') {\n        move_obj = move_from_san(move, sloppy);\n      } else if (typeof move === 'object') {\n        var moves = generate_moves();\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (move.from === algebraic(moves[i].from) &&\n              move.to === algebraic(moves[i].to) &&\n              (!('promotion' in moves[i]) ||\n              move.promotion === moves[i].promotion)) {\n            move_obj = moves[i];\n            break;\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null;\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj);\n\n      make_move(move_obj);\n\n      return pretty_move;\n    },\n\n    undo: function() {\n      var move = undo_move();\n      return (move) ? make_pretty(move) : null;\n    },\n\n    clear: function() {\n      return clear();\n    },\n\n    put: function(piece, square) {\n      return put(piece, square);\n    },\n\n    get: function(square) {\n      return get(square);\n    },\n\n    remove: function(square) {\n      return remove(square);\n    },\n\n    perft: function(depth) {\n      return perft(depth);\n    },\n\n    square_color: function(square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square];\n        return ((rank(sq_0x88) + file(sq_0x88)) % 2 === 0) ? 'light' : 'dark';\n      }\n\n      return null;\n    },\n\n    history: function(options) {\n      var reversed_history = [];\n      var move_history = [];\n      var verbose = (typeof options !== 'undefined' && 'verbose' in options &&\n                     options.verbose);\n\n      while (history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n        if (verbose) {\n          move_history.push(make_pretty(move));\n        } else {\n          move_history.push(move_to_san(move));\n        }\n        make_move(move);\n      }\n\n      return move_history;\n    }\n\n  };\n};\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (true) exports.Chess = Chess;\n/* export Chess object for any RequireJS compatible environment */\nif (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return Chess;  }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n//# sourceURL=webpack:///./node_modules/chess.js/chess.js?");

/***/ })

/******/ });